// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function evaluate(_x) {
  while(true) {
    var x = _x;
    switch (x.TAG | 0) {
      case /* Int */0 :
          return x._0;
      case /* Add */1 :
          return evaluate(x._0) + evaluate(x._1) | 0;
      case /* Sub */2 :
          return evaluate(x._0) - evaluate(x._1) | 0;
      case /* If */3 :
          if (Curry._1(Condition.evaluate, x._0)) {
            _x = x._1;
            continue ;
          }
          _x = x._2;
          continue ;
      
    }
  };
}

var Expression = {
  evaluate: evaluate
};

function evaluate$1(_x) {
  while(true) {
    var x = _x;
    switch (x.TAG | 0) {
      case /* Result */0 :
          return x._0;
      case /* And */1 :
          if (!evaluate$1(x._0)) {
            return false;
          }
          _x = x._1;
          continue ;
      case /* Or */2 :
          if (evaluate$1(x._0)) {
            return true;
          }
          _x = x._1;
          continue ;
      case /* Eq */3 :
          return Curry._1(Expression.evaluate, x._0) === Curry._1(Expression.evaluate, x._1);
      
    }
  };
}

var Condition = {
  evaluate: evaluate$1
};

var x = {
  TAG: /* Int */0,
  _0: 12
};

var y = {
  TAG: /* Int */0,
  _0: 45
};

var z = {
  TAG: /* Add */1,
  _0: x,
  _1: y
};

console.log(Curry._1(Expression.evaluate, z));

var u = {
  TAG: /* Eq */3,
  _0: x,
  _1: y
};

console.log(Curry._1(Condition.evaluate, u));

exports.Expression = Expression;
exports.Condition = Condition;
exports.x = x;
exports.y = y;
exports.z = z;
exports.u = u;
/*  Not a pure module */
